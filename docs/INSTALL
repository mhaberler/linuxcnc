Basic procedure
---------------

The simplest way to compile this package is:

  1. `cd' to the `src' directory under the directory containing the
     package's source code.

  2. Type `./configure' to configure the package for your system.  If
     you're using `csh' on an old version of System V, you might need
     to type `sh ./configure' instead to prevent `csh' from trying to
     execute `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  3. Type `make' to compile the package.

  4. Type `source scripts/rip-environment' to set up the environment.

  5. Type `linuxcnc' to test the software.


Detailed description
====================

Run-time script
===============

The runtime script is called linuxcnc, thus allowing you on an installed
to just type 'linuxcnc' and get it running.  On a run-in-place system
(e.g. the one you just got out of git), the runscript is scripts/linuxcnc.
When you just checked out a fresh copy of LinuxCNC, you'll see there is no
'scripts/linuxcnc', just a 'scripts/linuxcnc.in'.  By running configure
that one will get changed to 'scripts/linuxcnc'. configure will also
replace some default values for your system (folders, paths, etc).


Configure script
================

The `configure' autoconf script attempts to guess correct values for
various system-dependent variables used during compilation, and places
those values in several files, such as `Makefile.inc' and `rtapi.ini'.
It also creates a shell script `config.status' that can be run in the
future to recreate the current configuration, a file `config.cache'
that saves the results of its tests to speed up reconfiguring, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').


Real-time Thread Support
========================

LinuxCNC supports several thread `flavors'.  The traditional RT kernel
thread flavors, compiled as .ko kernel modules, are `rtai-kernel' and
`xenomai-kernel'.

The new RT userland thread flavors, compiled as .so dynamically
loadable plugins, are `xenomai' and `rt-preempt'.

The userland `posix' thread flavor is not real-time and should only be
used in simulation settings, never to control real machines.

Each of the RT thread flavors requires special kernel support.
Xenomai and RTAI kernel packages are available from the project, and
RT_PREEMPT kernel packages are available from upstream vendors and
third-party package repositories.  Please install one of these RT
kernels (refer to the documentation of the project on how to do that).

Optional Features
=================

If multiple RT flavors are available, LinuxCNC will attempt to detect
and build for all of them.  A subset may be selected on the configure
command line:

./configure --with-posix --with-rtai-kernel

For kernel thread flavors, if autoconf does not detect the desired
kernel source, a location may be explicitly configured:

./configure --with-xenomai-kernel \
    --with-xenomai-kernel-sources=/home/me/src/linux-3.5.7-xenomai

By default, LinuxCNC will build to run out of a local directory.  For
a system installation, specify the prefix for the install directory:

./configure --prefix=/usr/local

If you don't want to generate the documentation from source:
  --disable-build-documentation

Run `./configure --help' for more details on these and other available
options.


Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.
