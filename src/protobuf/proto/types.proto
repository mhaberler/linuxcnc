// fundamental types

enum ValueType {
    //  the following tags correspond to hal.h: hal_type_t;
    HAL__BIT   = 1;
    HAL__FLOAT = 2;
    HAL__S32   = 3;
    HAL__U32   = 4;

    BYTES     = 10;
    INT32     = 20;
    UINT32    = 30;
    INT64     = 40;
    UINT64    = 50;
    DOUBLE    = 60;
    STRING    = 70;
    BOOL      = 80;

    CARTESIAN = 100;
    LEGACY_CARTESIAN = 110;
    POSE      = 120;
    LEGACY_POSE    = 130;
}

enum HalPinDirection {
    //  the following tags correspond to hal.h: hal_pin_dir_t
    HAL__IN = 16;
    HAL__OUT = 32;
    HAL__IO = 48; // (HAL_IN | HAL_OUT),
}

enum HalParamDirection {
    //  the following tags correspond to hal.h: hal_param_dir_t
    HAL__RO = 64;
    HAL__RW = 192;
}

enum ObjectType {
    // option allow_alias = true; // for src/hal.h enum
    // doesnt work with ptotoc-c
    // NB: leading underscore to disambiguate
    HAL__PIN           = 1;
    HAL__SIGNAL        = 2;
    HAL__PARAM         = 3;
    HAL__THREAD        = 4;
    HAL__FUNCT         = 5;
    HAL__ALIAS         = 6;
    HAL__COMP_RT       = 7;
    HAL__COMP_USER     = 8;
    HAL__COMP_REMOTE   = 9;
    HAL__RING          = 10;
    HAL__GROUP         = 11;
    HAL__MEMBER_SIGNAL = 12;
    HAL__MEMBER_GROUP  = 13;
    HAL__MEMBER_PIN    = 14;
    RING__RECORD       = 15;
    RING__STREAM       = 16;

    VALUE             = 20;
    INSTANCE          = 21;
    ORIGINATOR        = 22;
    NAMED_VALUE       = 25;
}

enum RCS__STATUS {
    UNINITIALIZED__STATUS = -1;
    RCS__DONE = 1;
    RCS__EXEC = 2;
    RCS__ERROR = 3;
    RCS__RECEIVED = 4;
};


// enum MsgLevel {
//     // see enum msg_level_t in rtapi.h
//     RTAPI_MSG_NONE = 0;
//     RTAPI_MSG_ERR = 1;
//     RTAPI_MSG_WARN = 2;
//     RTAPI_MSG_INFO = 3;
//     RTAPI_MSG_DBG = 4;
//     RTAPI_MSG_ALL = 5;
// }

enum ReplyRequired {
    // NONE wont work with zmq REQ/REP sockets:
    // they require a reply
    // better to use XREQ/XREP
    NONE           = 0;
    ON_RECEPTION   = 1;
    ON_QUEUED      = 2;
    ON_COMPLETION  = 4;

    ALL_STEPS      = 255;
}

enum TelegramCause {
    PERIODIC = 1;
    CHANGE_NOTIFY = 2;
}

enum OriginDetail {
    UNIX_SIGNAL     = 10;
    INSTANCE_SHUTDOWN = 20;
    ZMQ_SOCKET      = 70;
    NML_LAYER       = 80;
    RCS_LAYER       = 90;
    CMS_LAYER       = 100;
    IP_LAYER        = 110;
    TCP_LAYER       = 120;
    PGM_LAYER       = 130;
}

enum OriginType {
    PROCESS         = 10;
    USER_THREAD     = 20;
    RT_THREAD       = 30;
    COMPONENT       = 40;
    THREAD_FUNCTION = 50;
    COMPONENT_INIT  = 60;
    COMPONENT_EXIT  = 70;
    GROUP           = 80;
    PIN             = 90;
    SIGNAL          = 100;
}

enum TelegramOpType {
    PING            = 10;
    ACKNOWLEDGE     = 15;
    REJECT          = 20;
    DONE            = 40;

    // used in pbring.comp
    TEST_COMMAND     = 100;
    TEST_RESPONSE    = 110;


    // REPORT         = 3010;
    SET_HAL_SIGNAL  = 3070;
    LINK_PINS       = 3080;

    // Command message types


    // HAL Bind messages
    BIND_REQUEST    = 4000;
    UNBIND_REQUEST  = 4010;

    // generic multiple value update
    UPDATE          = 4020;

    // Response message types
    UNBIND_CONFIRM  = 5000;
    BIND_CONFIRM    = 5010;
};

enum StatusType {
    ENQUEUED    = 1; // intermediate
    PROCESSING  = 2; // -- '' --
    COMPLETE    = 3; // final
    ERROR       = 4; // -- '' --
}

enum ContainerType {

    MT_TELEGRAM       = 2;
    MT_MOTCMD         = 3;
    MT_MOTSTATUS      = 4;
    MT_LEGACY_MOTCMD  = 5;
    MT_LEGACY_MOTSTATUS  = 6;
    MT_WOU            = 7;
    MT_HALUPDATE      = 8;
    MT_RTAPI_MESSAGE  = 9;

    MT_SYSLOG         = 18;
    MT_LEGACY_NML     = 19;
    MT_LEGACY_MOTCONFIG = 20;

    MT_OFFER          = 30;
    MT_CONFIRM_OFFER  = 35;
    MT_DISPLAY_MESSAGE = 40;
    MT_SHUTDOWN        = 45;
    MT_CONFIRM_SHUTDOWN = 50;

    MT_ASCII          = 100;
    MT_UNICODE        = 101;
    MT_GCODE          = 102;
    MT_PYTHON         = 103;
    MT_PICKLE         = 104;
    MT_TCL            = 105;
    MT_XML            = 106;
    MT_JSON           = 107;
    MT_JPEG           = 108;
    MT_PNG            = 109;
    MT_TIFF           = 110;
    MT_POSTSCRIPT     = 111;
    MT_SVG            = 112;


    MT_TASK_REPLY     = 900;
    MT_TICKET_UPDATE  = 901;

    // Motion command types. Frequently used, so bring in at offset 1000.
    // (see emc/motion/motion.h)

    // in case a Motion message type was added:
    // first run: make
    // then manually include protobuf/generated/mottypes.proto here

    // adjust this to be below lowest motion message type
    MT_EMCMOT_LOWER		= 1000;
    // adjust this to be above highest motion message type
    MT_EMCMOT_UPPER		= 1100;
    // neded for the  is_Motion_container(msgtype) test in container.hh

    // --- snip ---
    MT_EMCMOT_ABORT		= 1001;
    MT_EMCMOT_AXIS_ABORT		= 1002;
    MT_EMCMOT_ENABLE		= 1003;
    MT_EMCMOT_DISABLE		= 1004;
    MT_EMCMOT_ENABLE_AMPLIFIER		= 1005;
    MT_EMCMOT_DISABLE_AMPLIFIER		= 1006;
    MT_EMCMOT_ENABLE_WATCHDOG		= 1007;
    MT_EMCMOT_DISABLE_WATCHDOG		= 1008;
    MT_EMCMOT_ACTIVATE_JOINT		= 1009;
    MT_EMCMOT_DEACTIVATE_JOINT		= 1010;
    MT_EMCMOT_PAUSE		= 1011;
    MT_EMCMOT_RESUME		= 1012;
    MT_EMCMOT_STEP		= 1013;
    MT_EMCMOT_FREE		= 1014;
    MT_EMCMOT_COORD		= 1015;
    MT_EMCMOT_TELEOP		= 1016;
    MT_EMCMOT_SPINDLE_SCALE		= 1017;
    MT_EMCMOT_SS_ENABLE		= 1018;
    MT_EMCMOT_FEED_SCALE		= 1019;
    MT_EMCMOT_FS_ENABLE		= 1020;
    MT_EMCMOT_FH_ENABLE		= 1021;
    MT_EMCMOT_AF_ENABLE		= 1022;
    MT_EMCMOT_OVERRIDE_LIMITS		= 1023;
    MT_EMCMOT_HOME		= 1024;
    MT_EMCMOT_UNHOME		= 1025;
    MT_EMCMOT_JOG_CONT		= 1026;
    MT_EMCMOT_JOG_INCR		= 1027;
    MT_EMCMOT_JOG_ABS		= 1028;
    MT_EMCMOT_SET_LINE		= 1029;
    MT_EMCMOT_SET_CIRCLE		= 1030;
    MT_EMCMOT_SET_TELEOP_VECTOR		= 1031;
    MT_EMCMOT_CLEAR_PROBE_FLAGS		= 1032;
    MT_EMCMOT_PROBE		= 1033;
    MT_EMCMOT_RIGID_TAP		= 1034;
    MT_EMCMOT_SET_POSITION_LIMITS		= 1035;
    MT_EMCMOT_SET_BACKLASH		= 1036;
    MT_EMCMOT_SET_MIN_FERROR		= 1037;
    MT_EMCMOT_SET_MAX_FERROR		= 1038;
    MT_EMCMOT_SET_VEL		= 1039;
    MT_EMCMOT_SET_VEL_LIMIT		= 1040;
    MT_EMCMOT_SET_JOINT_VEL_LIMIT		= 1041;
    MT_EMCMOT_SET_JOINT_ACC_LIMIT		= 1042;
    MT_EMCMOT_SET_ACC		= 1043;
    MT_EMCMOT_SET_TERM_COND		= 1044;
    MT_EMCMOT_SET_NUM_AXES		= 1045;
    MT_EMCMOT_SET_WORLD_HOME		= 1046;
    MT_EMCMOT_SET_HOMING_PARAMS		= 1047;
    MT_EMCMOT_SET_DEBUG		= 1048;
    MT_EMCMOT_SET_DOUT		= 1049;
    MT_EMCMOT_SET_AOUT		= 1050;
    MT_EMCMOT_SET_SPINDLESYNC		= 1051;
    MT_EMCMOT_SPINDLE_ON		= 1052;
    MT_EMCMOT_SPINDLE_OFF		= 1053;
    MT_EMCMOT_SPINDLE_INCREASE		= 1054;
    MT_EMCMOT_SPINDLE_DECREASE		= 1055;
    MT_EMCMOT_SPINDLE_BRAKE_ENGAGE		= 1056;
    MT_EMCMOT_SPINDLE_BRAKE_RELEASE		= 1057;
    MT_EMCMOT_SET_MOTOR_OFFSET		= 1058;
    MT_EMCMOT_SET_JOINT_COMP		= 1059;
    MT_EMCMOT_SET_OFFSET		= 1060;
    MT_EMCMOT_COMMAND_OK		= 1061;
    MT_EMCMOT_COMMAND_UNKNOWN_COMMAND		= 1062;
    MT_EMCMOT_COMMAND_INVALID_COMMAND		= 1063;
    MT_EMCMOT_COMMAND_INVALID_PARAMS		= 1064;
    MT_EMCMOT_COMMAND_BAD_EXEC		= 1065;
    MT_EMCMOT_MOTION_DISABLED		= 1066;
    MT_EMCMOT_MOTION_FREE		= 1067;
    MT_EMCMOT_MOTION_TELEOP		= 1068;
    MT_EMCMOT_MOTION_COORD		= 1069;
    MT_EMCMOT_JOINT_FLAG		= 1070;
    MT_EMCMOT_MOTION_FLAG		= 1071;
    // --- snip ---

    // Miscellanous types

    MT_PRU_FIRMWARE          = 2048;

    // Mesanet firmware types: 3000 - 3999
    MT_MESA_5I20_FIRMWARE         = 3000;

    // a blob of unspecified content - for temporary use during development
    MT_BLOB           = 4000;

    // test message range: 5000-5100 - never used by core code
    MT_TEST1       = 5001;
    MT_TEST2       = 5002;
    MT_TEST3       = 5003;

    // NML messsage types are offset by 10000
    // reserved range 10000-13000
    //
    // example:
    //    EMC_OPERATOR_ERROR_TYPE has NMLTYPE 11
    // (see src/emc/nml_intf/emc.hh)
    // corresponding container type:
    //    MT_EMC_OPERATOR_ERROR_TYPE		= 10011;
    // all the NML message types
    // just the first three for now as examples:

    // include the file protobuf/generated/emctypes.proto
    // in case an NML message types was added
    // first run make
    // then manually include protobuf/generated/emctypes.proto here


    // adjust this to be below lowest NML message type
    MT_EMC_NML_LOWER		= 10000;
    // adjust this to be above highest NML message type
    MT_EMC_NML_UPPER		= 13000;
    // neded for the  is_NML_container(msgtype) test in container.hh

    // --- snip ---
    MT_EMC_OPERATOR_ERROR_TYPE		= 10011;
    MT_EMC_OPERATOR_TEXT_TYPE		= 10012;
    MT_EMC_OPERATOR_DISPLAY_TYPE		= 10013;
    MT_EMC_NULL_TYPE		= 10021;
    MT_EMC_SET_DEBUG_TYPE		= 10022;
    MT_EMC_SYSTEM_CMD_TYPE		= 10030;
    MT_EMC_AXIS_SET_AXIS_TYPE		= 10101;
    MT_EMC_AXIS_SET_UNITS_TYPE		= 10102;
    MT_EMC_AXIS_SET_MIN_POSITION_LIMIT_TYPE		= 10107;
    MT_EMC_AXIS_SET_MAX_POSITION_LIMIT_TYPE		= 10108;
    MT_EMC_AXIS_SET_FERROR_TYPE		= 10111;
    MT_EMC_AXIS_SET_HOMING_PARAMS_TYPE		= 10112;
    MT_EMC_AXIS_SET_MIN_FERROR_TYPE		= 10115;
    MT_EMC_AXIS_SET_MAX_VELOCITY_TYPE		= 10116;
    MT_EMC_AXIS_INIT_TYPE		= 10118;
    MT_EMC_AXIS_HALT_TYPE		= 10119;
    MT_EMC_AXIS_ABORT_TYPE		= 10120;
    MT_EMC_AXIS_ENABLE_TYPE		= 10121;
    MT_EMC_AXIS_DISABLE_TYPE		= 10122;
    MT_EMC_AXIS_HOME_TYPE		= 10123;
    MT_EMC_AXIS_UNHOME_TYPE		= 10135;
    MT_EMC_AXIS_JOG_TYPE		= 10124;
    MT_EMC_AXIS_INCR_JOG_TYPE		= 10125;
    MT_EMC_AXIS_ABS_JOG_TYPE		= 10126;
    MT_EMC_AXIS_ACTIVATE_TYPE		= 10127;
    MT_EMC_AXIS_DEACTIVATE_TYPE		= 10128;
    MT_EMC_AXIS_OVERRIDE_LIMITS_TYPE		= 10129;
    MT_EMC_AXIS_LOAD_COMP_TYPE		= 10131;
    MT_EMC_AXIS_SET_BACKLASH_TYPE		= 10134;
    MT_EMC_AXIS_STAT_TYPE		= 10199;
    MT_EMC_TRAJ_SET_AXES_TYPE		= 10201;
    MT_EMC_TRAJ_SET_UNITS_TYPE		= 10202;
    MT_EMC_TRAJ_SET_CYCLE_TIME_TYPE		= 10203;
    MT_EMC_TRAJ_SET_MODE_TYPE		= 10204;
    MT_EMC_TRAJ_SET_VELOCITY_TYPE		= 10205;
    MT_EMC_TRAJ_SET_ACCELERATION_TYPE		= 10206;
    MT_EMC_TRAJ_SET_MAX_VELOCITY_TYPE		= 10207;
    MT_EMC_TRAJ_SET_MAX_ACCELERATION_TYPE		= 10208;
    MT_EMC_TRAJ_SET_SCALE_TYPE		= 10209;
    MT_EMC_TRAJ_SET_MOTION_ID_TYPE		= 10210;
    MT_EMC_TRAJ_INIT_TYPE		= 10211;
    MT_EMC_TRAJ_HALT_TYPE		= 10212;
    MT_EMC_TRAJ_ENABLE_TYPE		= 10213;
    MT_EMC_TRAJ_DISABLE_TYPE		= 10214;
    MT_EMC_TRAJ_ABORT_TYPE		= 10215;
    MT_EMC_TRAJ_PAUSE_TYPE		= 10216;
    MT_EMC_TRAJ_STEP_TYPE		= 10217;
    MT_EMC_TRAJ_RESUME_TYPE		= 10218;
    MT_EMC_TRAJ_DELAY_TYPE		= 10219;
    MT_EMC_TRAJ_LINEAR_MOVE_TYPE		= 10220;
    MT_EMC_TRAJ_CIRCULAR_MOVE_TYPE		= 10221;
    MT_EMC_TRAJ_SET_TERM_COND_TYPE		= 10222;
    MT_EMC_TRAJ_SET_OFFSET_TYPE		= 10223;
    MT_EMC_TRAJ_SET_G5X_TYPE		= 10224;
    MT_EMC_TRAJ_SET_HOME_TYPE		= 10225;
    MT_EMC_TRAJ_SET_ROTATION_TYPE		= 10226;
    MT_EMC_TRAJ_SET_G92_TYPE		= 10227;
    MT_EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG_TYPE		= 10228;
    MT_EMC_TRAJ_PROBE_TYPE		= 10229;
    MT_EMC_TRAJ_SET_TELEOP_ENABLE_TYPE		= 10230;
    MT_EMC_TRAJ_SET_TELEOP_VECTOR_TYPE		= 10231;
    MT_EMC_TRAJ_SET_SPINDLESYNC_TYPE		= 10232;
    MT_EMC_TRAJ_SET_SPINDLE_SCALE_TYPE		= 10233;
    MT_EMC_TRAJ_SET_FO_ENABLE_TYPE		= 10234;
    MT_EMC_TRAJ_SET_SO_ENABLE_TYPE		= 10235;
    MT_EMC_TRAJ_SET_FH_ENABLE_TYPE		= 10236;
    MT_EMC_TRAJ_RIGID_TAP_TYPE		= 10237;
    MT_EMC_TRAJ_STAT_TYPE		= 10299;
    MT_EMC_MOTION_INIT_TYPE		= 10301;
    MT_EMC_MOTION_HALT_TYPE		= 10302;
    MT_EMC_MOTION_ABORT_TYPE		= 10303;
    MT_EMC_MOTION_SET_AOUT_TYPE		= 10304;
    MT_EMC_MOTION_SET_DOUT_TYPE		= 10305;
    MT_EMC_MOTION_ADAPTIVE_TYPE		= 10306;
    MT_EMC_MOTION_STAT_TYPE		= 10399;
    MT_EMC_TASK_INIT_TYPE		= 10501;
    MT_EMC_TASK_HALT_TYPE		= 10502;
    MT_EMC_TASK_ABORT_TYPE		= 10503;
    MT_EMC_TASK_SET_MODE_TYPE		= 10504;
    MT_EMC_TASK_SET_STATE_TYPE		= 10505;
    MT_EMC_TASK_PLAN_OPEN_TYPE		= 10506;
    MT_EMC_TASK_PLAN_RUN_TYPE		= 10507;
    MT_EMC_TASK_PLAN_READ_TYPE		= 10508;
    MT_EMC_TASK_PLAN_EXECUTE_TYPE		= 10509;
    MT_EMC_TASK_PLAN_PAUSE_TYPE		= 10510;
    MT_EMC_TASK_PLAN_STEP_TYPE		= 10511;
    MT_EMC_TASK_PLAN_RESUME_TYPE		= 10512;
    MT_EMC_TASK_PLAN_END_TYPE		= 10513;
    MT_EMC_TASK_PLAN_CLOSE_TYPE		= 10514;
    MT_EMC_TASK_PLAN_INIT_TYPE		= 10515;
    MT_EMC_TASK_PLAN_SYNCH_TYPE		= 10516;
    MT_EMC_TASK_PLAN_SET_OPTIONAL_STOP_TYPE		= 10517;
    MT_EMC_TASK_PLAN_SET_BLOCK_DELETE_TYPE		= 10518;
    MT_EMC_TASK_PLAN_OPTIONAL_STOP_TYPE		= 10519;
    MT_EMC_TASK_STAT_TYPE		= 10599;
    MT_EMC_TOOL_INIT_TYPE		= 11101;
    MT_EMC_TOOL_HALT_TYPE		= 11102;
    MT_EMC_TOOL_ABORT_TYPE		= 11103;
    MT_EMC_TOOL_PREPARE_TYPE		= 11104;
    MT_EMC_TOOL_LOAD_TYPE		= 11105;
    MT_EMC_TOOL_UNLOAD_TYPE		= 11106;
    MT_EMC_TOOL_LOAD_TOOL_TABLE_TYPE		= 11107;
    MT_EMC_TOOL_SET_OFFSET_TYPE		= 11108;
    MT_EMC_TOOL_SET_NUMBER_TYPE		= 11109;
    MT_EMC_TOOL_STAT_TYPE		= 11199;
    MT_EMC_AUX_ESTOP_ON_TYPE		= 11206;
    MT_EMC_AUX_ESTOP_OFF_TYPE		= 11207;
    MT_EMC_AUX_ESTOP_RESET_TYPE		= 11208;
    MT_EMC_AUX_INPUT_WAIT_TYPE		= 11209;
    MT_EMC_AUX_STAT_TYPE		= 11299;
    MT_EMC_SPINDLE_ON_TYPE		= 11304;
    MT_EMC_SPINDLE_OFF_TYPE		= 11305;
    MT_EMC_SPINDLE_INCREASE_TYPE		= 11309;
    MT_EMC_SPINDLE_DECREASE_TYPE		= 11310;
    MT_EMC_SPINDLE_CONSTANT_TYPE		= 11311;
    MT_EMC_SPINDLE_BRAKE_RELEASE_TYPE		= 11312;
    MT_EMC_SPINDLE_BRAKE_ENGAGE_TYPE		= 11313;
    MT_EMC_SPINDLE_SPEED_TYPE		= 11316;
    MT_EMC_SPINDLE_STAT_TYPE		= 11399;
    MT_EMC_COOLANT_MIST_ON_TYPE		= 11404;
    MT_EMC_COOLANT_MIST_OFF_TYPE		= 11405;
    MT_EMC_COOLANT_FLOOD_ON_TYPE		= 11406;
    MT_EMC_COOLANT_FLOOD_OFF_TYPE		= 11407;
    MT_EMC_COOLANT_STAT_TYPE		= 11499;
    MT_EMC_LUBE_ON_TYPE		= 11504;
    MT_EMC_LUBE_OFF_TYPE		= 11505;
    MT_EMC_LUBE_STAT_TYPE		= 11599;
    MT_EMC_IO_INIT_TYPE		= 11601;
    MT_EMC_IO_HALT_TYPE		= 11602;
    MT_EMC_IO_ABORT_TYPE		= 11603;
    MT_EMC_IO_SET_CYCLE_TIME_TYPE		= 11604;
    MT_EMC_IO_STAT_TYPE		= 11699;
    MT_EMC_INIT_TYPE		= 11901;
    MT_EMC_HALT_TYPE		= 11902;
    MT_EMC_ABORT_TYPE		= 11903;
    MT_EMC_STAT_TYPE		= 11999;
    // --- snip ---

}
