#!/bin/bash
#
# usage: mkprotodep -p <protodir>  -e <ext> -d <dependsdir> -g <gendir>
#
# supports multiple -p,-e options
#
# for all *.proto files in <protodir>
# create dependencies for the set of extensions in the
# directory for generated files is -g <gendir>
# directory for dependency files is -d <dependsdir>
#
# usage example:
#
# mkprotodep -p protobuf/proto -p protobuf/nanopb/generator -p /usr/local/include/google/protobuf \
#            -e pb.h -e npb.h -e pb-c.h -e pb.cc -e npb.c -e pb-c.c \
#            -d depends -g protobuf/generated
#
# with the above command line and only protobuf/proto/value.proto found
# this would generate:
#
# protobuf/generated/object.pb.h: protobuf/generated/value.pb.h
# protobuf/generated/object.pb.h: protobuf/proto/value.proto
# depends/protobuf/generated/object.pb.d: protobuf/generated/value.pb.h
# protobuf/generated/object.npb.h: protobuf/generated/value.npb.h
# protobuf/generated/object.npb.h: protobuf/proto/value.proto
# depends/protobuf/generated/object.pb.d: protobuf/generated/value.npb.h
# protobuf/generated/object.pb-c.h: protobuf/generated/value.pb-c.h
# protobuf/generated/object.pb-c.h: protobuf/proto/value.proto
# depends/protobuf/generated/object.pb.d: protobuf/generated/value.pb-c.h
# protobuf/generated/object.pb.cc: protobuf/generated/value.pb.cc
# protobuf/generated/object.pb.cc: protobuf/proto/value.proto
# depends/protobuf/generated/object.pb.d: protobuf/generated/value.pb.cc
# protobuf/generated/object.npb.c: protobuf/generated/value.npb.c
# protobuf/generated/object.npb.c: protobuf/proto/value.proto
# depends/protobuf/generated/object.pb.d: protobuf/generated/value.npb.c
# protobuf/generated/object.pb-c.c: protobuf/generated/value.pb-c.c
# protobuf/generated/object.pb-c.c: protobuf/proto/value.proto
# depends/protobuf/generated/object.pb.d: protobuf/generated/value.pb-c.c


DIRS=""
EXT=""
GENDIR=""
DEPDIR=""
# example args:
# DIRS="protobuf/proto  protobuf/nanopb/generator /usr/local/include/google/protobuf"
# EXT="pb.h npb.h pb-c.h pb.cc npb.c pb-c.c"
# GENDIR="protobuf/generated"
# DEPDIR="depends"
while getopts p:g:e:d: flag; do
  case $flag in
    p)
      DIRS="$DIRS $OPTARG"
      ;;
    g)
      GENDIR=$OPTARG
      ;;
    e)
      EXT="$EXT $OPTARG"
      ;;
    d)
      DEPDIR="$OPTARG"
      ;;
    ?)
      echo "Usage: $0 -p <protodir> -g <generated files dir> -e <extension> -d <depends dir>"
      exit;
      ;;
  esac
done

if test -z "$DIRS"
then
    echo "proto directory list empty - add with '-p <ext>'"
    exit 1
fi


(grep '^\s*import' `find $DIRS -maxdepth 1 -name '*.proto' -print`) | \
tr -d '":;'|sed -e 's/\s*import//g' | \
while read target dep ; do
    t=`basename $target .proto`
    d=`basename $dep .proto`
    if [ "$DEBUG" == "" ] ; then
	# determine location of proto file
	location=""
	for prefix in $DIRS
	do
	    cand=$prefix/$d".proto" #ep
	    if [ -f $cand ]
	    then
		location=$cand
	    fi
	done
	if [ -z $location ] ; then
	    #echo failed to locate $d in $DIRS >/dev/stderr
	    continue
	fi
	echo -e "$target:\t$location"

        # generated file deps
	for ext in $EXT #pb.h npb.h pb-c.h pb.cc npb.c pb-c.c
	do
	    echo $GENDIR/$t.$ext: $GENDIR/$d.$ext
	    echo $GENDIR/$t.$ext: $location
            # also depend the dependency files on headers and sources
	    echo $DEPDIR/$GENDIR/$t.pb.d: $GENDIR/$d.$ext
	done
    else
	echo HIT: $t $d

	# for prefix in $DIRS
	# do
	#     cand=$prefix/$dep
	#     if [ -f $cand ]
	#     then
	#     else
	# 	echo nope:  "--"$cand"--"  $prefix
	#     fi
	# done
    fi
done
