// everything we know about objects, including HAL objects


import "nanopb.proto";
import "types.proto";
import "value.proto";

package pb;

// describes a RTAPI/HAL/LinuxCNC instance
message Instance {
    optional string        name     = 1; //  [(nanopb).max_size = 41];
    optional sfixed32        id     = 2;
}

// a service, for announcement/response to ServiceRequest via zbeacon(7)
message ServiceAnnouncement {
    required ServiceType              stype = 1;
    required fixed32                version = 2 [default = 0];
    required fixed32               instance = 3 [default = 0]; // RTAPI instance id
    required ServiceAPI                 api = 8;
    optional string              ipaddress  = 4;
    optional fixed32                   port = 5;  // TCP port number
    optional string                     uri = 6;
    optional string            description  = 7;

}

// describes an entity which may cause a message:
// a process, a component, a thread, a group,
// a remote component
// also used as a optional error detail
message Originator {
    optional OriginType    origin   = 1;
    optional OriginDetail  detail   = 2;
    optional string        name     = 3; //   [(nanopb).max_size = 41];
    optional sfixed32      id       = 4;
    optional Instance      instance = 5;
}

message AnError {
    required sfixed32   error_code  = 1;
    optional Severity   severity    = 2;
    optional string     error_text  = 3;
    optional Originator    origin   = 4;
}

message Pin {
    optional ValueType   type       = 1;
    optional string      name       = 2; //    [(nanopb).max_size = 41];
    optional fixed32     handle     = 3;
    optional HalPinDirection dir    = 4;

    // One of the following must be filled in,
    // depending on type.
    optional bool          halbit   = 5;
    optional double        halfloat = 6;
    optional sfixed32      hals32   = 7;
    optional fixed32       halu32   = 8;

    optional sfixed32      owner    = 9;
    optional bool         linked    = 10;
    optional string      oldname    = 11; //   [(nanopb).max_size = 41];

    optional double      epsilon    = 12;
    optional fixed32      flags     = 13;
}

message Signal {
    optional ValueType   type       = 1;
    optional string      name       = 2; //  [(nanopb).max_size = 41];
    optional fixed32     handle     = 3;

    optional bool        halbit     = 5;
    optional double      halfloat   = 6;
    optional sfixed32    hals32     = 7;
    optional fixed32     halu32     = 8;
    optional string      strval     = 9;
    optional bytes       blob       = 10;

    optional fixed32     readers    = 11;
    optional fixed32     writers    = 12;
    optional fixed32     bidirs     = 13;
}

message Param {
    optional ValueType    type       = 1;
    optional string       name       = 2; //   [(nanopb).max_size = 41];
    optional fixed32      handle     = 3;

    optional bool         halbit     = 5;
    optional double       halfloat   = 6;
    optional sfixed32     hals32     = 7;
    optional fixed32      halu32     = 8;
    optional string       strval     = 9;
    optional bytes        blob       = 10;

    optional HalParamDirection  pdir = 11;
    optional string       oldname    = 12; //   [(nanopb).max_size = 41];
    optional sfixed32     owner      = 13;
    optional sfixed32     runtime    = 14;
    optional sfixed32     maytime    = 15;
}

message Function {
    optional string      name       = 1; //   [(nanopb).max_size = 41];
    optional fixed32     handle     = 2;
}

message Thread {
    optional string      name       = 1; //   [(nanopb).max_size = 41];
    optional fixed32     handle     = 2;
    optional bool        uses_fp    = 3;
    optional fixed32     period     = 4;
    optional sfixed32    prioritiy  = 5;
    optional fixed32     task_id    = 6;
    optional fixed32     cpu_id     = 7;
    repeated Function    functions  = 8; //   [(nanopb).max_count = 100];
}

message Component {
    optional string      name           = 1; //   [(nanopb).max_size = 41];
    optional fixed32     ninst          = 2;
    optional fixed32     handle         = 3;
    optional sfixed32    comp_id        = 4;
    optional fixed32     type           = 5;
    optional fixed32     state          = 6;
    optional fixed32     last_update    = 7;
    optional fixed32     last_bound     = 8;
    optional fixed32     last_unbound   = 9;
    optional fixed32     pid            = 10;
    repeated string      args           = 11; //   [(nanopb).max_count = 20,
                                              //   (nanopb).max_size = 41];
    optional sfixed32    scancycle      = 12;
    optional sfixed32    flags          = 13;
    optional sfixed32    userarg1       = 14;
    optional sfixed32    userarg2       = 15;
}

message Ring {
    optional string      name          = 1; //  [(nanopb).max_size = 41];
    optional fixed32      handle       = 2;
    optional sfixed32      owner       = 3;
    optional bool        stream        = 4;
    optional bool        wmutex        = 5;
    optional bool        rmutex        = 6;
    optional bool        rtapi_shm     = 7;
    optional sfixed32      reader      = 8;
    optional sfixed32      writer      = 9;
    optional sfixed32      size        = 10;
    optional sfixed32      scratchpad  = 11;
}

message Member {
    optional ObjectType   type          = 1;
    optional string       name          = 2; //  [(nanopb).max_size = 41];
    optional fixed32      handle        = 3;
    optional sfixed32     userarg1      = 4;

    optional bool         halbit        = 5;
    optional double       halfloat      = 6;
    optional sfixed32     hals32        = 7;
    optional fixed32      halu32        = 8;
    optional string       strval        = 9;
    optional bytes        blob          = 10;

    optional double       epsilon       = 11;
}

message Group {
    optional string       name          = 1; //  [(nanopb).max_size = 41];
    optional fixed32      handle        = 2;
    optional sfixed32     id            = 3;
    optional sfixed32     userarg1      = 4;
    optional sfixed32     userarg2      = 5;
    optional sfixed32     serial        = 6;
    repeated Member       member        = 7;
}

message Object {

    required ObjectType       type = 10;

    // an object identity is uniquely defined by a name, or a handle
    optional string           name = 20; //  [(nanopb).max_size = 41];
    optional fixed32         handle = 25;
    optional bool          changed = 30;  // relative to last use

    // scalars and compound values
    optional Value       value     = 50;

    // HAL objects
    // these are named objects which doubles up on Object.name
    // HAL object name has precedence over the Object name which should
    // not be used in in this case. The handle remains optional.

    // this is unfortunate but Protobuf doesnt support type inheritance
    // into submessages.
    optional Pin         pin       = 100;
    optional Signal      signal    = 110;
    optional Param       param     = 120;
    optional Thread      thread    = 130;
    optional Component   comp      = 140;
    optional Ring        ring      = 150;
    optional Group       group     = 160;
    optional Member      member    = 170;
    optional Function    function  = 180;
    optional AnError     error     = 190;
}
