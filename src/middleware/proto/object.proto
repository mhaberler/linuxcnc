// everything we know about objects, including HAL objects


import "nanopb.proto";
import "types.proto";
import "value.proto";

package pb;

// describes a RTAPI/HAL/LinuxCNC instance
message Instance {
    optional string        name     = 30; //  [(nanopb).max_size = 41];
    optional sfixed32        id       = 40;
}

// a service, for announcement/response to ServiceRequest via zbeacon(7)
message ServiceAnnouncement {
    required ServiceType              stype = 1;
    required fixed32                version = 2 [default = 0];
    required fixed32               instance = 3 [default = 0]; // RTAPI instance id
    required ServiceAPI                 api = 8;
    optional string              ipaddress  = 4;
    optional fixed32                   port = 5;  // TCP port number
    optional string                     uri = 6;
    optional string            description  = 7;

}

// describes an entity which may cause a message:
// a process, a component, a thread, a group,
// a remote component
// also used as a optional error detail
message Originator {
    optional OriginType    origin   = 10;
    optional OriginDetail  detail   = 20;
    optional string        name     = 30; //   [(nanopb).max_size = 41];
    optional sfixed32        id       = 40;
    optional Instance      instance = 50;
}

message AnError {
    required sfixed32     error_code  = 10;
    optional Severity   severity    = 20;
    optional string     error_text  = 30;
    optional Originator    origin   = 40;
}

message Pin {
    optional ValueType   type       = 10;
    optional string      name       = 20; //    [(nanopb).max_size = 41];
    optional fixed32     handle     = 25;
    optional HalPinDirection dir    = 30;

    // One of the following must be filled in,
    // depending on type.
    optional bool          halbit   = 100;
    optional double        halfloat = 101;
    optional sfixed32      hals32   = 102;
    optional fixed32       halu32   = 103;

    optional sfixed32      owner    = 40;
    optional bool         linked    = 50;
    optional string      oldname    = 60; //   [(nanopb).max_size = 41];

    optional double      epsilon    = 80;
    optional fixed32      flags     = 90;
}

message Signal {
    optional ValueType   type       = 10;
    optional string      name       = 20; //  [(nanopb).max_size = 41];
    optional fixed32     handle     = 25;

    optional bool        halbit     = 100;
    optional double      halfloat   = 101;
    optional sfixed32    hals32     = 102;
    optional fixed32     halu32     = 103;
    optional string      strval     = 104;
    optional bytes       blob       = 105;

    optional fixed32      readers    = 50;
    optional fixed32      writers    = 60;
    optional fixed32      bidirs     = 70;
}

message Param {
    optional ValueType  type       = 10;
    optional string      name       = 20; //   [(nanopb).max_size = 41];
    optional fixed32      handle     = 25;

    optional bool          halbit   = 100;
    optional double        halfloat = 101;
    optional sfixed32        hals32   = 102;
    optional fixed32        halu32   = 103;

    optional HalParamDirection pdir = 50;
    optional string      oldname    = 60; //   [(nanopb).max_size = 41];
    optional sfixed32      owner      = 70;
    optional sfixed32      runtime    = 80;
    optional sfixed32      maytime    = 90;
}

message Function {
    optional string      name       = 20; //   [(nanopb).max_size = 41];
    optional fixed32      handle     = 25;
}

message Thread {
    optional string      name       = 20; //   [(nanopb).max_size = 41];
    optional fixed32      handle     = 25;
    optional bool        uses_fp    = 30;
    optional fixed32      period     = 40;
    optional sfixed32      prioritiy  = 50;
    optional fixed32      task_id    = 60;
    optional fixed32      cpu_id     = 70;
    repeated Function    functions  = 80   [(nanopb).max_count = 100];
}

message Component {
    optional string      name          = 20; //   [(nanopb).max_size = 41];
    optional fixed32     ninst         = 22;
    optional fixed32      handle        = 25;
    optional sfixed32     comp_id       = 30;
    optional fixed32      type          = 40;
    optional fixed32      state         = 50;
    optional fixed32      last_update   = 60;
    optional fixed32      last_bound    = 70;
    optional fixed32      last_unbound  = 80;
    optional fixed32      pid           = 90;
    repeated string      args          = 100; //   [(nanopb).max_count = 20,
                                              //   (nanopb).max_size = 41];
    optional sfixed32      scancycle     = 110;
    optional sfixed32      flags         = 120;
}

message Ring {
    optional string      name          = 20; //  [(nanopb).max_size = 41];
    optional fixed32      handle        = 25;
    optional sfixed32      owner         = 40;
    optional bool        stream        = 50;
    optional bool        wmutex        = 60;
    optional bool        rmutex        = 70;
    optional bool        rtapi_shm     = 80;
    optional sfixed32      reader        = 90;
    optional sfixed32      writer        = 100;
    optional sfixed32      size          = 110;
    optional sfixed32      scratchpad    = 120;
}

message Member {
    optional ObjectType  type          = 10;
    optional string      name          = 20; //  [(nanopb).max_size = 41];
    optional fixed32      handle        = 25;
    optional sfixed32      userarg1      = 30;
    optional double      epsilon       = 40;

    optional bool             halbit   = 100;
    optional double           halfloat = 101;
    optional sfixed32           hals32   = 102;
    optional fixed32           halu32   = 103;

}

message Group {
    optional string      name          = 20; //  [(nanopb).max_size = 41];
    optional fixed32      handle        = 25;
    optional sfixed32      id            = 30;
    optional sfixed32      userarg1      = 50;
    optional sfixed32      userarg2      = 60;
    optional sfixed32      serial        = 70;
    repeated Member      member        = 80;
}

message Object {

    required ObjectType       type = 10;

    // an object identity is uniquely defined by a name, or a handle
    optional string           name = 20; //  [(nanopb).max_size = 41];
    optional fixed32         handle = 25;
    optional bool          changed = 30;  // relative to last use

    // scalars and compound values
    optional Value       value     = 50;

    // HAL objects
    // these are named objects which doubles up on Object.name
    // HAL object name has precedence over the Object name which should
    // not be used in in this case. The handle remains optional.

    // this is unfortunate but Protobuf doesnt support type inheritance
    // into submessages.
    optional Pin         pin       = 100;
    optional Signal      signal    = 110;
    optional Param       param     = 120;
    optional Thread      thread    = 130;
    optional Component   comp      = 140;
    optional Ring        ring      = 150;
    optional Group       group     = 160;
    optional Member      member    = 170;
    optional Function    function  = 180;
    optional AnError       error     = 190;
}
