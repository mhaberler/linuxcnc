Service Discovery:

A client requires a set of services: protocol, version, instance etc

To obtain those at runtime, a UDP broadcast request/unicast reply scheme is
DHCP-style. Eventually this might get replaced by the zmq UDP transport
once that gets implemented, but the pattern will remain the same.

The files udpsdpublish.py and udpsdlookup.py are the 'living protocol specs'
since it's so trivial.


Q & A:
------
why isnt this using mDNS/DNS-SD (avahi)? Because the avahi API is really complex
and management is non-trivial.

Anything better downstream?  The zeroMQ ZYRE might work for this, once its a
tad more stable.


C discovery API
---------------
#include "sdiscover.h"

// init service discovery for a particular instance id
sdreq_t *req = sd_new(zctx_t *ctx, int port, int instance);

// add a service (stype, version, api) to wishlist
// returns 0 on sucess, -1 on error
int sd_add(req, stype, version, api)

// run the query on the wishlist
// returns 0 on sucess (all services found)
// -ETIMEDOUT on timeout, -ENOENT on some missing services
int sd_runquery(req, timeout);

// print the result
sd_fprint(const char *tag, req)

// result accessors
const char *sd_ipaddress(req, stype)
int sd_port(req, stype)
int sd_version(req, stype)
const char *sd_uri(req, stype)
const char *sd_description(req, stype)

// destroy discovery
sd_destroy(sdreq_t **)


C publisher API
---------------
#include "sdpublish.h"

// init service discovery for a particular instance id
spub_t *req = sp_new(instance);

// export a service (protocol, version, api) to wishlist
// returns 0 on sucess, -1 on error
int sd_add(req, stype, version, ipaddr, port, uri, api, description);

// start the service publisher
// returns 0 on sucess, -1 on error
int sd_start(req)

// log service requests
// returns 0 on sucess, -1 on error
int sd_log(req, int log)

// start the service publisher
int sd_destroy(spub_t **)





// a service, for announcement/response to ServiceRequest via zbeacon(7)
message ServiceAnnouncement {
    required ServiceType              stype = 1;
    required fixed32                version = 2 [default = 0];
    required fixed32               instance = 3 [default = 0]; // RTAPI instance id
    optional string              ipaddress  = 4;
    optional fixed32                   port = 5;  // TCP port number
    optional string                     uri = 6;
    optional string            description  = 7;
    optional ServiceAPI                 api = 8;

}