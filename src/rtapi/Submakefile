INCLUDES += rtapi

# this covers the userpci and shmdrv directories too, in a bit cludgy way
../include/%.h: ./rtapi/%.h
	mkdir -p ../include/userpci
	cp  $^ $@

../include/%.hh: ./rtapi/%.hh
	cp  $^ $@

../include/%.h: ./rtapi/shmdrv/%.h
	mkdir -p ../include/shmdrv
	cp  $^ $@


##########################################
# defaults for all thread styles

# Sources/objects included in both RTAPI and ULAPI, both kbuild and
# user threads
XXAPI_COMMON_SRCS := \
	rtapi/rtapi_support.c \
	rtapi/rtapi_common.c \
	rtapi/rtapi_task.c \
	rtapi/rtapi_shmem.c \
	rtapi/rtapi_time.c \
	rtapi/rtapi_exception.c \
	rtapi/$(THREADS_SOURCE).c
XXAPI_COMMON_OBJS := $(patsubst %.c,%.o,$(XXAPI_COMMON_SRCS))

# rtapi_compat needs to know where rtapi.ini lives
%/rtapi_compat.o:  \
	EXTRAFLAGS += -DEMC2_SYSTEM_CONFIG_DIR=\"$(EMC2_SYSTEM_CONFIG_DIR)\"
%/rtapi_compat.o:  \
	EXTRA_CFLAGS += -DEMC2_SYSTEM_CONFIG_DIR=\"$(EMC2_SYSTEM_CONFIG_DIR)\"

# ULAPI:  ../lib/ulapi$THREADSTYLE.so (TBD)
#
# List of sources whose objects objects/rtapi/*.o link into
# ../lib/ulapi$THREADSTYLE.soiblinuxcnchal.so;
#
ULAPI_SRCS := \
	$(XXAPI_COMMON_SRCS) \
	rtapi/ulapi_main.c
ifeq ($(BUILD_SYS),kbuild)
ULAPI_SRCS += rtapi/rtapi_module.c
endif

# ulapi.so needs sources to be built separately for each flavor.  The
# Makefile rules, and TOOBJS & friends, don't handle this case.
#
# Hack around this by creating a separate flavor-specific symlink to
# the rtapi directory and then build in the usual way for each flavor.
FLAVOR_ULAPI_SRCS := $(patsubst rtapi/%,rtapi/$(threads)/%,$(ULAPI_SRCS))

$(FLAVOR_ULAPI_SRCS) : rtapi/$(threads)/%: rtapi/%
	test -L rtapi/$(threads) || ln -sf . rtapi/$(threads)

# resolved at loadtime
$(call TOOBJSDEPS, $(FLAVOR_ULAPI_SRCS)): EXTRAFLAGS += \
	$(THREADS_RTFLAGS) -fPIC

ULAPISO := ../lib/ulapi-$(threads).so

$(ULAPISO): ../lib/liblinuxcnchal.so ../lib/liblinuxcncshm.so \
		$(call TOOBJS, $(FLAVOR_ULAPI_SRCS))
	$(ECHO) Creating shared object $@
	@mkdir -p ../lib/$(RTDIR_EXT)
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS)  -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ $(ULAPISO_LIBS) $(RT_LDFLAGS) \
	../lib/liblinuxcncshm.so \
	../lib/liblinuxcnchal.so


USERSRCS += $(FLAVOR_ULAPI_SRCS)
TARGETS += $(ULAPISO)

##################################################################
#                 The ulapi autoload library
#
# provides ULAPI with loading-on-first-reference of RTAPI methods
##################################################################

ULAPI_AUTOLOAD_SRCS := \
	rtapi/ulapi_autoload.c \
	rtapi/rtapi_compat.c \
	rtapi/rtapi_support.c

USERSRCS += $(ULAPI_AUTOLOAD_SRCS)

ULAPI_AUTOLOAD_LIB := ../lib/liblinuxcnculapi.so
TARGETS += $(ULAPI_AUTOLOAD_LIB)

$(call TOOBJSDEPS, $(ULAPI_AUTOLOAD_SRCS)): EXTRAFLAGS += -DULAPI -fPIC

$(ULAPI_AUTOLOAD_LIB).0: $(call TOOBJS, $(ULAPI_AUTOLOAD_SRCS)) \
	../lib/liblinuxcncini.so \
	../lib/liblinuxcncshm.so
	$(ECHO) Creating shared library $(notdir $@)
	@mkdir -p ../lib
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS) -Wl,-rpath,$(EMC2_RTLIB_DIR) \
	    -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ -ldl $(RT_LDFLAGS)


##################################################################
#                 USERLAND THREAD STYLES
##################################################################
ifeq ($(BUILD_SYS),user-dso)
# Build only during real module build, i.e. when 'make modules
# threads=<flavor>'
ifeq ($(BUILD_THREAD_MODULES),yes)

# the rtapi.so module
obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	$(XXAPI_COMMON_OBJS) \
	rtapi/rtapi_main.o \
	rtapi/rtapi_compat.o

# rule for kernel module, moved from src/Makefile
$(RTLIBDIR)/rtapi$(MODULE_EXT): $(addprefix $(OBJDIR)/,$(rtapi-objs))
$(RTLIBDIR)/rtapi$(MODULE_EXT): EXTRA_LDFLAGS += $(RT_LDFLAGS)

################################################
# rtapi_app_<flavor>
#
# A matching rtapi_app_<flavor> is built for each userland thread
# flavor at the same time as RTAPI module flavor builds.
#
# rtapi_app_<flavor> requires two sources plus one already in
# ulapi.so.

RTAPI_APP_SRCS := \
	rtapi/$(threads)/rtapi_app.cc \
	rtapi/$(threads)/rtapi_compat.c

$(RTAPI_APP_SRCS): rtapi/$(threads)/%: rtapi/%
	ln -sf . rtapi/$(threads)

USERSRCS += $(RTAPI_APP_SRCS)

# RIP builds need to add LIB_DIR as an rpath, since LD_LIBRARY_PATH
# isn't honored for setuid executables.
ifeq ($(RUN_IN_PLACE),yes)
RTAPI_APP_RPATH=-Wl,-rpath,$(LIB_DIR)
endif

# HAAACK:
#
# Build objects/rtapi/rtapi_app.o in Makefile as other USERSRCS,
# but replace -DULAPI with -DRTAPI:  Makefile doesn't handle -DRTAPI
# C++ sources
$(call TOOBJSDEPS, rtapi/$(threads)/rtapi_app.cc): EXTRAFLAGS = \
	$(LIBUDEV_CFLAGS) -UULAPI $(RTFLAGS)

../libexec/rtapi_app_$(threads): \
		$(call TOOBJS, $(RTAPI_APP_SRCS) \
		    rtapi/$(threads)/rtapi_support.c) \
		../lib/liblinuxcncini.so.0 ../lib/liblinuxcncshm.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CXX) -Wl,-rpath,$(EMC2_RTLIB_DIR)/$(threads) $(RTAPI_APP_RPATH) \
	    -o $@ $^ $(RT_LDFLAGS) $(LIBUDEV_LIBS) -ldl

modules:  ../libexec/rtapi_app_$(threads)
endif # BUILD_THREAD_MODULES


##################################################################
#                     KERNEL THREAD STYLES
##################################################################
else  # BUILD_SYS == kbuild

obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	$(XXAPI_COMMON_OBJS) \
	rtapi/rtapi_module.o

# rule for kernel module, moved from src/Makefile
$(RTLIBDIR)/rtapi$(MODULE_EXT): $(addprefix $(OBJDIR)/,$(rtapi-objs))

endif  # BUILD_SYS == kbuild

##################################################################
#                     the kdetect test program
##################################################################
RTAPI_KDETECT_SRCS =  rtapi/rtapi_kdetect.c
USERSRCS += $(RTAPI_KDETECT_SRCS)
RTAPI_KDETECT_OBJS := \
	$(call TOOBJS, $(RTAPI_KDETECT_SRCS))

$(call TOOBJSDEPS, $(RTAPI_KDETECT_SRCS)): \
	EXTRAFLAGS += -DTEST

# Build target
../libexec/kdetect: $(RTAPI_KDETECT_OBJS)  ../lib/liblinuxcnchal.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ -lrt -ldl

TARGETS += ../libexec/kdetect

##################################################################
#                     the rtapi message demon
##################################################################

RTAPI_MSGD_SRCS =  rtapi/rtapi_msgd.c rtapi/rtapi_compat.c
RTAPI_MSGD_OBJS := $(call TOOBJS, $(RTAPI_MSGD_SRCS))

$(call TOOBJSDEPS, $(RTAPI_MSGD_SRCS)): \
	EXTRAFLAGS += -DTEST

../libexec/rtapi_msgd: $(RTAPI_MSGD_OBJS) \
		../lib/liblinuxcncshm.so ../lib/liblinuxcncini.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ -lrt

USERSRCS += $(RTAPI_MSGD_SRCS)
TARGETS += ../libexec/rtapi_msgd

# lock debugging help plus a bit of API example
FLAVOR_SRCS =  rtapi/flavor.c rtapi/rtapi_compat.c

../libexec/flavor: $(call TOOBJS, $(FLAVOR_SRCS)) \
		../lib/liblinuxcncshm.so ../lib/liblinuxcncini.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ -lrt

USERSRCS += $(FLAVOR_SRCS)
TARGETS += ../libexec/flavor

##################################################################
#                     rtapi.ini config file
##################################################################

../etc/linuxcnc/rtapi.ini: ../scripts/gen-rtapi.ini.sh
	@mkdir -p $(dir $@)
	bash $< > $@
TARGETS += ../etc/linuxcnc/rtapi.ini
